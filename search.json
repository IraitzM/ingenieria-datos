[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Ingeniería de datos",
    "section": "",
    "text": "Prólogo\nSeamos honestos, el mundo de la ingeniería de datos es un lío. Tenemos que lidiar con el desarrollo de las aplicaciones que recaban datos, fuentes internas, externas, con distintos formatos y cadencias de datos,… Y unificar todo en un repositorio que permita un buen gobierno de los datos, facilite su uso para analistas y científicos de datos, permita una evolución de nuestro modelo de datos corporativo y sea fácil e intuitivo.\nAh, y barato a poder ser. Todo un reto.\nNuestro posición como ingenieros de datos está en el epicentro de la acción dada la relevancia que han tomado los campos de la ciencia de datos e inteligencia artificial. Además, el ámbito corporativo necesita de ciertas garantías para poder dar cumplimiento al marco regulatorio cuando se trata de datos de carácter personal o con impacto a usuarios.\nPor ello debemos de datos buena cuenta de las mejores prácticas a la hora de realizar nuestra tarea.",
    "crumbs": [
      "Prólogo"
    ]
  },
  {
    "objectID": "content/intro.html",
    "href": "content/intro.html",
    "title": "1  Introducción",
    "section": "",
    "text": "1.1 Inicios\nEste libro pretende ser una guía sencilla con referencias al estado de la cuestión y herramientas en boga. Hablaremos de:\nE intentaremos cubrir las últimas tendencias en herramientas, en la medida de lo posible. Para ello, deberemos hacernos eco del ciclo de vida de los datos en toda su extensión.\nEl del ingeniero de datos es un rol a caballo entre las áreas de negocio y los desarrolladores de software, tomando gran parte de las prácticas aprendidas de estos. Aunque enfocándonos en la puesta al servicio de los datos.\nY empezaremos con un concepto que no está exento de controversia: el modelado de datos. Aunque para ello, debemos entender el contexto histórico que rodea a los ingenieros de datos trasladándonos a los primeros sistemas de gestión de datos y su aparición a finales de los años 60 del siglo pasado.\nCon frecuencia olvidamos el recorrido que hemos realizado en el mundo de la informática y cómo impacta las decisiones o aspectos de los sistemas de hoy día.\nPor eso es importante entender el trasfondo histórico y las herencias que a pesar de no ser muy lógicas, determinan algunas de las prácticas que nos encontramos en la actualidad.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción</span>"
    ]
  },
  {
    "objectID": "content/intro.html#inicios",
    "href": "content/intro.html#inicios",
    "title": "1  Introducción",
    "section": "",
    "text": "Curiosidades\n\n\n\n\n\nEs habitual que las nuevas generaciones no sepan el origen del símbolo de guardar.\nEl disquete que era un medio físico para guardar contenido (el pendrive de los antiguos).\n\n\n\nDisquete físico\n\n\nPero mucha gente se olvida que la configuración de teclado que empleamos en la actualidad es España, QWERTY por las primeras teclas en el extremo superior izquierdo de los teclados, es una herencia de las máquinas de escribir y que esta configuración a pesar de no ser la que nos permite una mayor velocidad de redacción impedia que los martillos de la máquina se bloquearan.\n\n\n\nMartillos en una máquina de escribir\n\n\nLa misma razón por la que la tecla enter en sus inicios se conocia como retorno de carro (return carriage) cuando no existe carro que retornar en nuestros ordenadores modernos.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción</span>"
    ]
  },
  {
    "objectID": "content/intro.html#los-sistemas-centrales",
    "href": "content/intro.html#los-sistemas-centrales",
    "title": "1  Introducción",
    "section": "1.2 Los sistemas centrales",
    "text": "1.2 Los sistemas centrales\nEn sus inicios, las máquinas evolucionaron de máquinas individuales donde tarjetas perforadas determinaban los automatismos, a sistemas eléctrónicos y sofisticados que disponian de canales de entrada y salida (teclados y pantallas) para realizar las acciones que determinaban las acciones de la máquina.\n\n\n\nAquellos maravillosos años\n\n\nInternational Business Machines (IBM) fue una de las primeras compañias en realizar esa transición de máquinas que habían servido para fines militares al ámbito comercial, corporativo, al servicio de instituciones privadas con problemas de grandes dimensiones.\nEn aquella época las máquinas que hoy llamamos ordenadores o computadoras eran recursos muy costosos y por ello, existían unidades centrales a las que se accedía desde nodos terminales. Sistemas únicamente de acceso a la máquina a la que estaban conectadas para pedirle que hiciera algo, introducir datos de cuentas de cliente, operaciones de cálculo y balances, etc. Lo habitual en la empresa donde este rol lo cubrían secretarias que venían de ámbitos como la mecanografía.\nNo existia internet además y una vez salíamos del dominio de la empresa no se podía actuar sobre esos sistemas. Había que hablar en un lenguaje de muy bajo nivel con la máquina, poco intuitivo para gente poco versada en esas tecnologías. Eran tiempos oscuros.\nEstos sistemas gestionaban tanto los datos que los empleados iban registrando así como las acciones que se realizaban sobre estos con rutinas que reflejana la operativa de la compañia: procesos de compa, transferencias bancarias, facturación de servicios y contabilidad general, entre otros.\nSon los que conocemos como sistemas centrales de datos y gran parte de este trabajo se lo debemos a una persona en concreto, Edgar Fank Codd, y su trabajo en este ámbito titulado Un modelo tabular1 de datos para grandes bancos de datos compartidos (Codd 1970).\n\n\n\n\n\n\nMainframe y COBOL\n\n\n\n\n\nOs sorprendería la cantidad de empresas que aún a día de hoy emplean máquinas mainframe con programas COBOL que muy pocos individuos a nivel global saben a ciencia cierta lo que hacen. Es parte de la deuda técnica que muchas empresas no terminan de quitarse de encima por mucho avance de la tecnología que haya. Es parte de nuestra componente humana y la dificultad que nos supone el cambio.\n\n\n\n\n\n\n\nCodd, Edgar F. 1970. «A relational model of data for large shared data banks». Communications of the ACM 13 (6): 377-87.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción</span>"
    ]
  },
  {
    "objectID": "content/intro.html#footnotes",
    "href": "content/intro.html#footnotes",
    "title": "1  Introducción",
    "section": "",
    "text": "Uso la traducción tabular de el término inglés relation que se refiere a la estrucura de los datos y la traducción a relacional puede dar a entender una gestión relacional que no es tal en los sistemas que ideó Codd↩︎",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción</span>"
    ]
  },
  {
    "objectID": "content/modelado/intro.html",
    "href": "content/modelado/intro.html",
    "title": "Modelado de datos",
    "section": "",
    "text": "Entidades y relaciones\nDebemos considerar que el modelado de datos era algo obligatorio en los sistemas iniciales. Las bases de relacionales requerían informar del esquema de sus estructuras de datos antes de poder insertar datos en estas.\nEn la década de los 2000 esto fue alterado debido al crecimiento de sistemas flexibles en ese sentido, las bases de datos NoSQL y sistemas Hadoop que no requerían informar de las estructuras de datos almacenadas. Pero es una cuestión de quién realiza esta tarea, no tanto de no necesitarla más, ya que la estructuración de los datos es algo obligatorio para poder entender lo que tenemos entre manos.\nHaremos un pequeño barrido histórico y así quizás podamos entender las opciones actuales. Pero primero es crucial que entendamos que el modelado es el medio por el que conseguimos trasladar nuestra realidad a un medio técnico.\nEl proceso de modelar los datos de una empresa es en primera instancia un entendimiento de sus procesos productivos. Debemos entender como interactúan las distintas partes para así conocer los datos que estos procesos generaran y las necesidades de estos.\nSolemos tener la urgencia de correr a las implementaciones técnicas pero estas pueden variar dependiendo las necesidades del sistema que manejemos. Sin embargo, el modelado lógico solo cambiará cuando los procesos de negocio cambien o nuestra empresa incluya nuevas líneas de negocio.\nDe este modo, el modelado es un proceso que parte de la estructura más abstracta hasta la implementación técnica del modelo.",
    "crumbs": [
      "Modelado de datos"
    ]
  },
  {
    "objectID": "content/modelado/intro.html#entidades-y-relaciones",
    "href": "content/modelado/intro.html#entidades-y-relaciones",
    "title": "Modelado de datos",
    "section": "",
    "text": "Entidades\nUna entidad en un diagrama entidad-relación representa un objeto o concepto del mundo real que puede ser identificado de manera única y sobre el cual se desea almacenar información. Una entidad que contiene distintos atributos que describen características de esta.\n\n\n\n\n\nerDiagram\n    ALUMNOS {\n        numero id_alumno\n        texto nombre\n        texto apellido\n    }\n\n\n\n\n\n\nPodríamos tener varias entidades que representan conceptos clave (personas, lugares, unidades corporativas, etc.) de nuestros procesos de negocio. Si tuviéramos una academia, existirían entidades como estas.\n\n\n\n\n\nerDiagram\n    ALUMNOS {\n        numero id_alumno\n        texto nombre\n        texto apellido\n    }\n\n    ASIGNATURAS {\n        numero id_asignatura\n        texto nombre\n    }\n\n    PROFESORES {\n        numero id_alumno\n        texto nombre\n        texto apellido\n    }\n\n\n\n\n\n\nLa clave es entender cómo interactúan entre sí. Por ejemplo, un alumno estará matriculado a una o varias asignaturas. Y un profesor imparte una o varias asignaturas.\n\n\n\n\n\nerDiagram\n    ALUMNOS ||--|| ASIGNATURAS : matriculado\n    PROFESORES ||--|| ASIGNATURAS : imparte\n\n\n\n\n\n\nA estas nociones, (matriculado e imparte) las conocemos como relaciones y juntas conforman un diagrama entidad relación.\n\n\n\n\n\nerDiagram\n    ALUMNOS {\n        numero id_alumno\n        texto nombre\n        texto apellido\n    }\n\n    ASIGNATURAS {\n        numero id_asignatura\n        texto nombre\n    }\n\n    PROFESORES {\n        numero id_alumno\n        texto nombre\n        texto apellido\n    }\n\n    ALUMNOS ||--|| ASIGNATURAS : matriculado\n    PROFESORES ||--|| ASIGNATURAS : imparte\n\n\n\n\n\n\nEstas relaciones también pueden disponer de atributos, como el año de matriculación o impartición, y esto define la granularidad de estas relaciones\nun PROFESOR IMPARTIÓ en Febrero del 2025 una ASIGNATURA \na la vez que describe nuestros procesos empresariales.\nun EMPLEADO VENDIÓ 500 unidades de un PRODUCTO a un CLIENTE\nun CLIENTE TRANSFIRIÓ x cantidad de euros a otro CLIENTE\nNos ayuda a entender el contexto de información que deberá albergar nuestro sistema.\nUna vez este esquema está claro y consolidado con nuestro interlocutores las unidades de negocio podemos empezar a aterrizar en base a las necesidades técnicas qué forma final tomarán nuestros datos en su repositorio final.\n\n\n\nProceso de modelado de datos",
    "crumbs": [
      "Modelado de datos"
    ]
  },
  {
    "objectID": "content/modelado/formasnormales.html",
    "href": "content/modelado/formasnormales.html",
    "title": "2  Formas normales",
    "section": "",
    "text": "2.1 Primera forma normal (2FN)\nCuando Edgar Codd diseño los sistemas de gestión de datos tabulares o RDBMS (Relational Data Base Management Systems) su planteamiento no cubría únicamente la necesidad de informar el esquema, si no de que este cubriera las necesidades de los procesos de negocio. De manera que estos sistemas fueran los garantes de que la base de datos cumpliera estas restricciones y siempre ofreciera una visión consistente de la información.\nUn sencillo ejemplo es pensar en una estructura de datos que almacena nuestro balance en cuenta. Si nuestro banco no permite que ese balance sea negativo, ninguna acción debería permitir que esto suceda a nivel del sistema que los almacena y gestiona. Codd se aseguró de diseñar un sistema que ofreciera esas capacidades.\nLas formas normales nacen precisamente de los trabajos de Codd como solución a algunos de los problemas que presentaban los sistemas iniciales. El planteamiento inicial es que los datos deben ser almacenados en tablas, con lo que podemos representar de forma visual nuestras tablas del siguiente modo.\nEjemplo de una tabla sobre alumnos apuntados a asignaturas\nSolemos representar estas estructuras indicando la información de su esquema:\nEsto genera una ilustración de entidad como esta. Una entidad que contiene distintos atributos que en el contexto tabular conocemos como columnas de la tabla.\nLa primera forma normal (1FN) establece que todos los valores de los atributos en una tabla deben ser atómicos, es decir, cada campo debe contener un solo valor y no listas o conjuntos. Esto implica eliminar grupos repetitivos y asegurar que cada columna almacene únicamente un dato por fila.\nEsto es una limitación de los sistemas de aquella época que los actuales no disponen, pero bien es cierto que si la información corresponde a una entidad relevante como son las asignaturas de una academia, con multiples interacción y datos relativos a distintas operaciones, bien se antoja que dispongan de su propia entidad como veremos más adelante.\nVentajas de la 1FN:\nEjemplo de una tabla en 1FN sobre alumnos apuntados a asignaturas\nDisponer de la información de este modo me obliga a que cualquier cambio sobre los datos de los alumnos deba realizarse en varias filas. En estas tablas nos gusta disponer de un concepto llamado clave que identifica unívocamente cada registro.\nEn nuestro caso, el id_alumno refiere a cada alumno pero esta información está por duplicado y no permite identificar filas concretas.",
    "crumbs": [
      "Modelado de datos",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Formas normales</span>"
    ]
  },
  {
    "objectID": "content/modelado/formasnormales.html#primera-forma-normal-2fn",
    "href": "content/modelado/formasnormales.html#primera-forma-normal-2fn",
    "title": "2  Formas normales",
    "section": "",
    "text": "Facilita la consulta y manipulación de los datos.\nEvita la ambigüedad y redundancia en los registros.\nPermite una mejor organización y estructuración de la información.\n\n\n\n\nid_alumno\nnombre\napellido\nasignatura\n\n\n\n\n001\nAna\nGarcía\nMatemáticas\n\n\n001\nAna\nGarcía\nFísica\n\n\n002\nLuis\nPérez\nQuímica\n\n\n002\nLuis\nPérez\nBiología\n\n\n003\nMarta\nLópez\nHistoria\n\n\n003\nMarta\nLópez\nInglés",
    "crumbs": [
      "Modelado de datos",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Formas normales</span>"
    ]
  },
  {
    "objectID": "content/modelado/formasnormales.html#segunda-forma-normal-2fn",
    "href": "content/modelado/formasnormales.html#segunda-forma-normal-2fn",
    "title": "2  Formas normales",
    "section": "2.2 Segunda forma normal (2FN)",
    "text": "2.2 Segunda forma normal (2FN)\nLa segunda forma normal (2FN) se alcanza cuando una tabla está en primera forma normal y, además, todos los atributos que no forman parte de la clave principal dependen completamente de ella, no solo de una parte de la clave si esta es compuesta. Esto implica eliminar dependencias parciales, dividiendo la información en varias tablas si es necesario.\nVentajas de la 2FN:\n\nReduce la redundancia de datos.\nFacilita la actualización y mantenimiento de la base de datos.\nEvita inconsistencias al modificar información relacionada.\n\n\n\n\n\n\n\nClave compuesta\n\n\n\n\n\nUna clave compuesta es una clave primaria formada por dos o más columnas que, en conjunto, identifican de manera única cada fila de una tabla. Se utiliza cuando ningún atributo por sí solo puede garantizar la unicidad de los registros, pero la combinación de varios sí lo hace.\n\n\n\nLa segunda forma normal nos obliga a separar nuestra tabla en dos entidades separadas: alumnos y asignaturas. Esto tiene sentido ya que si somos una escuela, serán dos entidades relevantes que se relacionarán con otras entidades de forma individualizada. Por ejemplo, si añadiéramos una tercera entidad, profesores, esta tendrá relaciones específicas y concretas con las asignaturas y no con los alumnos directamente a priori.\nPara indicar las relaciones entre entidades solemos indicar conexiones entrantes y salientes de los dos esquemas.\n\n\n\n\n\nerDiagram\n    ALUMNOS {\n        numero id_alumno\n        texto nombre\n        texto apellido\n    }\n    ASIGNATURAS {\n        numero id_asignatura\n        texto nombre\n    }\n\n\n\n\n\n\nLas relaciones varían dependiendo de la cardinalidad de las mismas. Es decir, como se relacionan los datos entre sí:\n\n1-a-1: Una asignatura tiene solo un alumno y viceversa\n1-a-muchos: Una asignatura tiene muchos alumnos, pero cada alumno solo tiene una asignatura\nmuchos-a-muchos: Las asignaturas tiene muchos alumnos y cada alumno puede estar en varias asignaturas.\n\nEntrada wikipedia\nEn nuestro ejemplo anterior la relación entre alumnos y asignaturas es muchos-a-muchos, lo cual requiere una tabla intermedia para que la relación entre ambas entidades no genere un volumen excesivo de datos al desnormalizar la información.\n\n\n\n\n\n\nDesnormalizar\n\n\n\nSi bien es cierto que la normalización de los datos en estos términos nos permite una mejor gestión, casi seguro que el consumo de estos requerirá construir tablas donde se combine la información de alumnos, profesores y asignaturas, como bien pudiera ser un informe de carga de trabajo por profesor o de alumnos promedio por aula. Casi siempre la información la consumiremos de una forma distinta a la forzada para ser almacenada y gestionada.\n\n\nPara indicar el tipo de relación se emplean indicaciones visuales como el hecho de que la relación tenga como mínimo una relación existente (con el circulo se marca que pueda no existir dato asociado), o si la relación identifica a a las partes.\nSi queremos indicar que un alumno puede o no estar matriculado en muchas asignaturas, mientras que una asignatura debe tener solo un alumno (es una academia muy privada) lo indicaremos así:\n\n\n\n\n\nerDiagram\n    ALUMNOS ||--o{ ASIGNATURAS: matriculado\n\n\n\n\n\n\nMientras que si entendemos que para formar parte de la academia las asignaturas debe tener al menos un alumno (y pueden tener muchos) y cada alumno deberá tener al menos una asignatura (y puede matricularse en varias), lo haremos así:\n\n\n\n\n\nerDiagram\n    ALUMNOS }|--|{ ASIGNATURAS: matriculado",
    "crumbs": [
      "Modelado de datos",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Formas normales</span>"
    ]
  },
  {
    "objectID": "content/modelado/formasnormales.html#tercera-forma-normal-3fn",
    "href": "content/modelado/formasnormales.html#tercera-forma-normal-3fn",
    "title": "2  Formas normales",
    "section": "2.3 Tercera forma normal (3FN)",
    "text": "2.3 Tercera forma normal (3FN)\nLa tercera forma normal (3FN) se alcanza cuando una tabla está en segunda forma normal y, además, todos los atributos que no forman parte de la clave principal no dependen transitivamente de ella. Es decir, cada campo debe depender únicamente de la clave primaria y no de otros atributos no clave.\nEsto resuelve problemas como la redundancia y las dependencias indirectas, evitando que la modificación de un dato implique cambios en múltiples lugares y reduciendo el riesgo de inconsistencias. La 3FN facilita el mantenimiento y la integridad de la base de datos, asegurando que cada dato se almacene en un solo lugar y que las relaciones entre entidades sean claras y directas.\nPor ejemplo, bien pudiera ser que un mismo profesor imparta varias asignaturas, con lo que el identificador de la asignatura no identifica univocamente a nuestros profesores.\n\n\n\n\n\nerDiagram\n    ALUMNOS {\n        numero id_alumno\n        texto nombre\n        texto apellido\n    }\n    ASIGNATURAS {\n        numero id_asignatura\n        texto nombre\n        texto profesor\n    }\n\n\n\n\n\n\nEsto merece separar este concepto en una entidad independiente con su propio identificador.\n\n\n\n\n\nerDiagram\n    ALUMNOS {\n        numero id_alumno\n        texto nombre\n        texto apellido\n    }\n    ASIGNATURAS {\n        numero id_asignatura\n        texto nombre\n    }\n    PROFESORES {\n        numero id_profesor\n        texto nombre\n    }\n\n\n\n\n\n\nY posteriormente podremos unir las relaciones entre las entidades:\n\nUn alumno debe estar matriculado en al menos una asignatura\nUna asignatura debe tener al menos un alumno matriculado para ser cursada\nUn profesor puede dar multiples asignatura con la opción de no estar impartiendo ninguna\nUna asignatura solo puede ser impartida por un profesor\n\n\n\n\n\n\nerDiagram\n    ALUMNOS {\n        numero id_alumno\n        texto nombre\n        texto apellido\n    }\n    ASIGNATURAS {\n        numero id_asignatura\n        texto nombre\n    }\n    PROFESORES {\n        numero id_profesor\n        texto nombre\n    }\n    ALUMNOS }|--|{ ASIGNATURAS: matriculado\n    PROFESORES ||--o{ ASIGNATURAS: imparte\n\n\n\n\n\n\nCon este esquema claro podemos ver como debemos disponer la información para que nuestro sistema gestor de datos pueda contener la estructura tal y como necesitamos.",
    "crumbs": [
      "Modelado de datos",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Formas normales</span>"
    ]
  },
  {
    "objectID": "content/sistemas/intro.html",
    "href": "content/sistemas/intro.html",
    "title": "3  Sistemas de gestión de datos",
    "section": "",
    "text": "pendiente",
    "crumbs": [
      "Sistemas gestores de datos",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Sistemas de gestión de datos</span>"
    ]
  },
  {
    "objectID": "content/load/intro.html",
    "href": "content/load/intro.html",
    "title": "4  Carga de datos",
    "section": "",
    "text": "pendiente",
    "crumbs": [
      "Ingesta de datos",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Carga de datos</span>"
    ]
  },
  {
    "objectID": "content/transform/intro.html",
    "href": "content/transform/intro.html",
    "title": "5  Transformación",
    "section": "",
    "text": "pendiente",
    "crumbs": [
      "Transformación de datos",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Transformación</span>"
    ]
  },
  {
    "objectID": "content/explotacion/intro.html",
    "href": "content/explotacion/intro.html",
    "title": "Explotación de los datos",
    "section": "",
    "text": "pendiente",
    "crumbs": [
      "Explotación de los datos"
    ]
  },
  {
    "objectID": "content/explotacion/bi.html",
    "href": "content/explotacion/bi.html",
    "title": "6  Inteligencia de negocio",
    "section": "",
    "text": "La inteligencia de negocio o Business Intelligence (BI) es sin duda uno de los recursos clave a la hora de conocer la actividad de nuestra empresa. Toda esa información que los datos ocultan, si la manipulamos de forma correcta y la presentamos de un modo lógico puede ayudarnos a determinar si estamos comprando de más, vendiendo de menos, si nuestras líneas de fabricación están siendo bien empleadas o si nuestros almacenes requieren una renovación del stock.",
    "crumbs": [
      "Explotación de los datos",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Inteligencia de negocio</span>"
    ]
  },
  {
    "objectID": "content/explotacion/ds.html",
    "href": "content/explotacion/ds.html",
    "title": "7  Ciencia de datos",
    "section": "",
    "text": "pendiente",
    "crumbs": [
      "Explotación de los datos",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Ciencia de datos</span>"
    ]
  },
  {
    "objectID": "content/references.html",
    "href": "content/references.html",
    "title": "Referencias",
    "section": "",
    "text": "Codd, Edgar F. 1970. “A Relational Model of Data for Large Shared\nData Banks.” Communications of the ACM 13 (6): 377–87.",
    "crumbs": [
      "Referencias"
    ]
  }
]